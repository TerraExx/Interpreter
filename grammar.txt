program : declarations? (compound_statement)* compound_statement_main

declarations : VARIABLES LCURLY variable_declaration* RCULRY 

variable_declaration : type_spec variable (COMMA variable)* SEMICOL

compound_statement : type_spec variable LPAREN parameter_list RPAREN LCURLY ((variable_declaration)*)? statement_list RCURLY

parameter_list : parameter | (parameter COMMA parameter_list)*

parameter : type_spec variable

compound_statement_main : MAIN  LCURLY ((variable_declaration)*)? statement_list RCURLY

statement_list : statement SEMI | statement SEMI statement_list 

statement : assignment_statement | compound_statement_call | return | if_statement | empty

if_statement: IF LPAREN expr RPAREN LCURLY statement_list RCURLY (ELSE LCRULY statement_list RCURLY)?

compound_statement_call : variable LPAREN argument_list RPAREN

argument_list : argument | (argument COMMA argument_list)

argument : variable | INTEGER_CONST | REAL_CONST

assignment_statement : variable ASSIGN expr

return : RETURN (variable | INTEGER_CONST | REAL_CONST)

expr : term ((arithmetich_L1 | logical) term)*

term : factor ((MUL | INTEGER_DIV) factor)*

arithmetich_L1 : PLUS | MINUS

logical:  LT_EQUAL
		| LESS_THAN 
		| GT_EQUAL 
		| GREATER_THAN
		| EQUAL 

factor :   PLUS factor
         | MINUS factor
         | INTEGER_CONST
         | REAL_CONST
         | LPAREN expr RPAREN
         | compound_statement_call
	     | variable

variable : ID

type_spec :   INT8 
			| INT16 
			| INT32 
			| INT8 
			| INT16 
			| INT32 
			| FLOAT

empty : 